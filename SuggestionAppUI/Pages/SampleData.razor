@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData

<h3>Sample Data</h3>

@if (categoriesCreated)
{
    <h4>Categories have been created.</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>
}
@if (statusesCreated)
{
    <h4>Statuses have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateStatuses">Create Statuses</button>
}

 @*Should Only be clicked once*@
<button class = "btn btn-danger" @onclick="GenerateSampleData">Create Sample Data</button>

@code {
    private bool categoriesCreated = false;
    private bool statusesCreated = false;

    private async Task GenerateSampleData()
    {
        // create sample user.
        UserModel user = new()
            {
                FirstName = "İsmail",
                LastName = "Üçel",
                EmailAddress = "iso@test.com",
                DisplayName = "Sample İsmail Üçel",
                ObjectIdentifier = "abc-123"
            };
        await userData.CreateUser(user);

        // Find the user to get the _id mongo creates
        var foundUser = await userData.GetUserFromAuthentication("abc-123");
        var categories = await categoryData.GetAllCategories();
        var statuses = await statusData.GetAllStatuses();

        // Id of user who voted (sample data)
        HashSet<string> votes = new();
        votes.Add("1");
        votes.Add("2");
        votes.Add("3");

        // create sample suggestion
        SuggestionModel suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[0],
                Suggestion = "Our First suggestion",
                Description = "This is a suggestion created by the sample data generation method"
            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[1],
                Suggestion = "Our Second suggestion",
                Description = "This is a suggestion created by the sample data generation method",
                SuggestionStatus = statuses[0],
                OwnerNotes = "This is the note for the status."
            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[2],
                Suggestion = "Our Third suggestion",
                Description = "This is a suggestion created by the sample data generation method",
                SuggestionStatus = statuses[1],
                OwnerNotes = "This is the note for the status."
            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[3],
                Suggestion = "Our Fourth suggestion",
                Description = "This is a suggestion created by the sample data generation method",
                SuggestionStatus = statuses[2],
                UserVotes = votes,
                OwnerNotes = "This is the note for the status."
            };
        await suggestionData.CreateSuggestion(suggestion);

        votes.Add("4");

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[4],
                Suggestion = "Our Fifth suggestion",
                Description = "This is a suggestion created by the sample data generation method",
                SuggestionStatus = statuses[3],
                UserVotes = votes,
                OwnerNotes = "This is the note for the status."
            };
        await suggestionData.CreateSuggestion(suggestion);
    }

    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCategories();

        if (categories?.Count > 0)
        {
            return;
        }
        CategoryModel cat = new()
            {
                CategoryName = "Desktop",
                CategoryDescription = "Desktop apps for banks,hospitals etc."
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Mobile",
                CategoryDescription = "Mobile apps for ios and android etc."
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Games",
                CategoryDescription = "Game development for consoles,mobiles etc."
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "IoT",
                CategoryDescription = "Internet of things apps."
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Artifical Intelligence",
                CategoryDescription = "Subjects like machine-learning, deep learning etc."
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "System Hardware",
                CategoryDescription = "Hardware jobs like simulations etc."
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Other",
                CategoryDescription = "Not sure which category this fits in."
            };
        await categoryData.CreateCategory(cat);

        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetAllStatuses();

        if (statuses?.Count > 0)
        {
            return;
        }

        StatusModel stat = new()
            {
                StatusName = "Completed",
                StatusDescription = "The project was completed."
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Testing&Integration",
                StatusDescription = "We are doing the tests for the project."
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Implementation",
                StatusDescription = "We are implementing the project."
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Design",
                StatusDescription = "Planning and Analysis are done. Now we are in the design process"
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Analysis",
                StatusDescription = "The project is accepted and now we are in the analysis process."
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Planing",
                StatusDescription = "The project is accepted and now we are in the planning process."
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Upcoming",
                StatusDescription = "The project idea was accepted and we will start plannig soon."
            };
        await statusData.CreateStatus(stat);


        stat = new()
            {
                StatusName = "Watching",
                StatusDescription = "The project idea is interesting. We are watching to see how much interest there is in it.."
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Dismissed",
                StatusDescription = "The project was not something that we are going to undertake."
            };
        await statusData.CreateStatus(stat);

        statusesCreated = true;
    }
}