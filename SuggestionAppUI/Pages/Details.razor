@page "/Details/{Id}"
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject IUserData userData
@inject ISuggestionData suggestionData
@inject IStatusData statusData

<h1>Suggestion Details</h1>

<div>
    <div>
        @if (suggestion is not null)
        {
            <div>
                @*Left hand side*@
                <div>
                        <div @onclick="VoteUp">
                            <div>@GetUpvoteTopText()</div>
                            <span class="oi oi-caret-top"></span>
                            <div>@GetUpvoteBottomText()</div>
                        </div> 
                        <div>
                            <div>@suggestion.DateCreated.ToString("MM.dd.yyyy")</div>
                        </div>
                        </div>
                    <div>
                        <div>@suggestion.Suggestion</div>
                        <div>@suggestion.Author.DisplayName</div>
                        <div>@suggestion.Description</div>
                        <div>@suggestion.Category.CategoryName</div>
                    </div>
                
                @*Right hand side*@
                <div>
                    <button @onclick="ClosePage"></button>
                </div>
            </div>
            
        }
    </div>
</div>

@if (suggestion?.SuggestionStatus is not null) // if suggestion is not null and status is not null
{
    <div>
        <div>
            <div></div>
            <div>
                <div>
                    @suggestion.SuggestionStatus.StatusName
                </div>
                <div>
                    @((MarkupString)suggestion.OwnerNotes) @*html acts like  html*@
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; } //public because other pages will access this variable

    private SuggestionModel suggestion;
    private UserModel loggedInUser;
    private List<StatusModel> statuses;
    private string settingStatus = "";
    private string urlText = "";

    protected async override Task OnInitializedAsync()
    {
       //Get data of the suggestion that was selected
        suggestion = await suggestionData.GetSuggestion(Id);
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        statuses = await statusData.GetAllStatuses();
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

     private string GetUpvoteTopText()
    {
        if (suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00"); //01,02,...10
        }
        else
        {
            return "Click To";
        }
    }

    private string GetUpvoteBottomText()
    {
        if (suggestion.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }

    private async Task VoteUp()
    {
        if (loggedInUser is not null)
        {
            if (suggestion.Author.Id == loggedInUser.Id)
            {
                // Can't vote on your own suggestion
                return;
            }

            // UserVotes is a hashSet and cannot have duplicate values
            // Does it locally
            if (suggestion.UserVotes.Add(loggedInUser.Id) == false)
            {
                suggestion.UserVotes.Remove(loggedInUser.Id);
            }

            // Update to database
            await suggestionData.UpVoteSuggestion(suggestion.Id, loggedInUser.Id);
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }


}
